---
title: Law Tracker
format: html
---

Coming soon.

```{python}
import plotly.graph_objects as go
import pandas as pd

# Example data - replace with your processed data
weekly_dates = ['2023-01-02', '2023-01-09', '2023-01-16']
weekly_prices = [85, 88, 87]

quarterly_dates = ['2023-01-01', '2023-04-01']
quarterly_prices = [88, 91]

fig = go.Figure()

fig.add_trace(go.Scatter(
    x=weekly_dates,
    y=weekly_prices,
    mode='lines+markers',
    name='Weekly Average',
    line=dict(color='lightblue'),
    marker=dict(size=8),
    hovertemplate='Week: %{x}<br>Price: €%{y:.2f}<extra></extra>'
))

fig.add_trace(go.Scatter(
    x=quarterly_dates,
    y=quarterly_prices,
    mode='lines+markers',
    name='Quarterly Average',
    line=dict(shape='hv', color='darkblue'),
    marker=dict(size=8),
    hovertemplate='Quarter Start: %{x}<br>Price: €%{y:.2f}<extra></extra>'
))

fig.update_layout(
    yaxis_title='Auction Price €/tCO₂e',
    xaxis_title='Date',
    hovermode='x unified',
    template='plotly_white',
    title='Weekly vs. Quarterly Auction Price Averages'
)

fig.show()
```

<div id="calculator">
  <h2>Carbon Credit Price Calculator</h2>
  <label>Weight of Emissions (tonnes): <input type="number" id="weight" value="50" min="0" step="any"></label>
  <label>Emission Factor (tCO₂e/tonne): <input type="number" id="ef" value="2.3" step="0.1" min="0"></label>
  <label>Weekly Average Price (€/tCO₂e): <input type="number" id="WeeklyPrice" value="90" step="0.01" min="0"></label>
  <label>Quarterly Average Price (€/tCO₂e): <input type="number" id="QuarterlyPrice" value="90" step="0.01" min="0"></label>
  <button id="calcButton">Calculate</button>
  <p id="result_weekly" class="result"></p>
  <p id="result_quarterly" class="result"></p>
</div>

<script>
  // Wait until the Plotly plot is fully rendered
  document.addEventListener("DOMContentLoaded", function() {
    // Get the Plotly plot div automatically inserted by Quarto/Python
    // The div has class 'plotly' or you can target the first plotly div
    const plotDiv = document.querySelector(".plotly");

    if (!plotDiv) {
      console.error("Plotly plot not found!");
      return;
    }

    plotDiv.on('plotly_click', function(eventData) {
      const point = eventData.points[0];
      const series = point.data.name;
      const value = point.y;

      if(series === 'Weekly Average') {
        document.getElementById('WeeklyPrice').value = value.toFixed(2);
      } else if(series === 'Quarterly Average') {
        document.getElementById('QuarterlyPrice').value = value.toFixed(2);
      }
    });

    document.getElementById('calcButton').addEventListener('click', function() {
      const weight = parseFloat(document.getElementById('weight').value);
      const ef = parseFloat(document.getElementById('ef').value);
      const weeklyPrice = parseFloat(document.getElementById('WeeklyPrice').value);
      const quarterlyPrice = parseFloat(document.getElementById('QuarterlyPrice').value);

      if(isNaN(weight) || isNaN(ef) || isNaN(weeklyPrice) || isNaN(quarterlyPrice)) {
        alert('Please enter valid numbers in all fields.');
        return;
      }

      const totalWeekly = weight * ef * weeklyPrice;
      const totalQuarterly = weight * ef * quarterlyPrice;

      document.getElementById('result_weekly').textContent =
        `Price based on Weekly Average: €${totalWeekly.toFixed(2)}`;

      document.getElementById('result_quarterly').textContent =
        `Price based on Quarterly Average: €${totalQuarterly.toFixed(2)}`;
    });
  });
</script>
