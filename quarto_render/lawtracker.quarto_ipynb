{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Law Tracker\n",
        "format: html\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "Coming soon.\n"
      ],
      "id": "429e1bd1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\", message=\"Workbook contains no default style.*\")\n",
        "import pandas as pd\n",
        "import os\n",
        "import numpy as np\n",
        "import plotly.graph_objects as go\n",
        "import plotly.io as pio\n",
        "\n",
        "# Data loading and processing\n",
        "path = \"../data\"\n",
        "\n",
        "dataframes = []\n",
        "for file in os.listdir(path):\n",
        "    if file.endswith(\".xlsx\"):\n",
        "        filepath = os.path.join(path, file)\n",
        "        df = pd.read_excel(filepath)\n",
        "        dataframes.append(df)\n",
        "\n",
        "df = pd.concat(dataframes, ignore_index=True)\n",
        "df.to_excel(\"df.xlsx\", index=False)\n",
        "df = df.rename(columns={\"Unnamed: 6\": \"Auction Price €/tCO2\"})\n",
        "df = df.rename(columns={\"Unnamed: 1\": \"Date\"})\n",
        "\n",
        "# Prepare weekly data\n",
        "df1 = df[['Date', 'Auction Price €/tCO2']].dropna()\n",
        "df1 = df1.iloc[2:]\n",
        "df1['Date'] = pd.to_datetime(df1['Date'], errors='coerce')\n",
        "df1 = df1.dropna(subset=['Date'])\n",
        "df1['year'] = df1['Date'].dt.isocalendar().year\n",
        "df1['week'] = df1['Date'].dt.isocalendar().week\n",
        "weeklyaverage = df1.groupby(['year', 'week'])['Auction Price €/tCO2'].mean().reset_index()\n",
        "df1 = pd.merge(df1, weeklyaverage, on=['year', 'week'], how='left', suffixes=('', '_weekly_avg'))\n",
        "df1.rename(columns={'Auction Price €/tCO2_weekly_avg': 'Weekly Avg Auction Price €/tCO2'}, inplace=True)\n",
        "df1.sort_values(by=['year', 'week'], inplace=True)\n",
        "df1['yearweek'] = df1['year'].astype(str) + '-W' + df1['week'].astype(str).str.zfill(2)\n",
        "df1['yearweek_date'] = pd.to_datetime(df1['year'].astype(str) + df1['week'].astype(str).str.zfill(2) + '1', format='%G%V%u')\n",
        "\n",
        "# Prepare quarterly data\n",
        "df2 = df[['Date', 'Auction Price €/tCO2']].copy()\n",
        "df2['Date'] = pd.to_datetime(df2['Date'], errors='coerce')\n",
        "df2.dropna(subset=['Date'], inplace=True)\n",
        "df2['year'] = df2['Date'].dt.isocalendar().year\n",
        "df2['quarter'] = df2['Date'].dt.quarter\n",
        "quarteraverage = df2.groupby(['year', 'quarter'])['Auction Price €/tCO2'].mean().reset_index()\n",
        "df2 = pd.merge(df2, quarteraverage, on=['year', 'quarter'], how='left', suffixes=('', '_quarteravg'))\n",
        "# The column after merge is 'Auction Price €/tCO2_quarteravg'\n",
        "# So, just check columns:\n",
        "print(\"Columns in df2:\", df2.columns)\n",
        "# Proceed with plotting\n",
        "\n",
        "# Create plotly figure\n",
        "fig = go.Figure()\n",
        "\n",
        "# Add Weekly Average trace\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=df1['yearweek_date'],\n",
        "    y=df1['Weekly Avg Auction Price €/tCO2'],\n",
        "    mode='lines+markers',\n",
        "    name='Weekly Average',\n",
        "    line=dict(color='lightblue'),\n",
        "    hovertemplate='Week: %{x|%Y-%m-%d}<br>Price: €%{y:.2f}<extra></extra>'\n",
        "))\n",
        "\n",
        "# Add Quarterly Average trace\n",
        "# Use the correct column name from the merge\n",
        "quarterly_column_name = 'Auction Price €/tCO2_quarteravg'\n",
        "print(\"Using column:\", quarterly_column_name)\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=df2['quarter_start'],\n",
        "    y=df2[quarterly_column_name],\n",
        "    mode='lines+markers',\n",
        "    name='Quarterly Average',\n",
        "    line=dict(shape='hv', color='darkblue'),\n",
        "    hovertemplate='Quarter Start: %{x|%Y-%m-%d}<br>Price: €%{y:.2f}<extra></extra>'\n",
        "))\n",
        "\n",
        "# Generate HTML for the plot\n",
        "plot_html = pio.to_html(fig, full_html=False, include_plotlyjs='cdn')"
      ],
      "id": "4c847e2b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Build the full HTML page\n",
        "full_html = f\"\"\"\n",
        "<html>\n",
        "<head>\n",
        "  <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>\n",
        "</head>\n",
        "<body>\n",
        "<h2>Comparing EU ETS Allowance Closing Prices Based on Weekly v. Quarterly Averages</h2>\n",
        "\n",
        "<!-- Plot container -->\n",
        "<div id=\"plot\">{plot_html}</div>\n",
        "\n",
        "<!-- Hidden inputs to store selected prices from plot -->\n",
        "<input type=\"hidden\" id=\"selectedWeeklyPrice\" value=\"\">\n",
        "<input type=\"hidden\" id=\"selectedQuarterlyPrice\" value=\"\">\n",
        "\n",
        "<!-- Emission input fields -->\n",
        "<div>\n",
        "  <label>Weight of Emissions (tonnes): <input type=\"number\" id=\"weight\" value=\"50\"></label><br>\n",
        "  <label>Emission Factor (tCO₂e/tonne): <input type=\"number\" id=\"ef\" value=\"2.3\" step=\"0.1\"></label><br>\n",
        "  <button onclick=\"calculateCBAM()\">Calculate</button>\n",
        "</div>\n",
        "\n",
        "<!-- Results -->\n",
        "<p id=\"result_weekly\"></p>\n",
        "<p id=\"result_quarterly\"></p>\n",
        "\n",
        "<!-- Scripts for interaction -->\n",
        "<script>\n",
        "  // Add click event listener to the plot\n",
        "  document.querySelector('#plot').on('plotly_click', function(data){\n",
        "    const point = data.points[0];\n",
        "    if(point.data.name === 'Weekly Average'){\n",
        "        const weeklyPrice = point.y;\n",
        "        document.getElementById('selectedWeeklyPrice').value = weeklyPrice;\n",
        "        alert('Selected Weekly Price: €' + weeklyPrice.toFixed(2));\n",
        "    } else if(point.data.name === 'Quarterly Average'){\n",
        "        const quarterlyPrice = point.y;\n",
        "        document.getElementById('selectedQuarterlyPrice').value = quarterlyPrice;\n",
        "        alert('Selected Quarterly Price: €' + quarterlyPrice.toFixed(2));\n",
        "    }\n",
        "  });\n",
        "\n",
        "  function calculateCBAM() {\n",
        "    const weight = parseFloat(document.getElementById('weight').value);\n",
        "    const ef = parseFloat(document.getElementById('ef').value);\n",
        "    const weeklyPrice = parseFloat(document.getElementById('selectedWeeklyPrice').value);\n",
        "    const quarterlyPrice = parseFloat(document.getElementById('selectedQuarterlyPrice').value);\n",
        "\n",
        "    if (isNaN(weeklyPrice) || isNaN(quarterlyPrice)) {\n",
        "        alert('Please click on the plot points to select both weekly and quarterly prices.');\n",
        "        return;\n",
        "    }\n",
        "\n",
        "    const totalWeekly = weight * ef * weeklyPrice;\n",
        "    const totalQuarterly = weight * ef * quarterlyPrice;\n",
        "\n",
        "    document.getElementById('result_weekly').innerText =\n",
        "      `Carbon Certificate Price based on Weekly EU ETS Allowance Closing Price Averages: €${totalWeekly.toFixed(2)}`;\n",
        "\n",
        "    document.getElementById('result_quarterly').innerText =\n",
        "      `Carbon Certificate Price based on Quarterly EU ETS Allowance Closing Price Averages: €${totalQuarterly.toFixed(2)}`;\n",
        "  }\n",
        "</script>\n",
        "</body>\n",
        "</html>\n"
      ],
      "id": "b28bda7f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Save the HTML file\n",
        "with open(\"carbon_price_comparison.html\", \"w\") as f:\n",
        "    f.write(full_html)\n",
        "\n",
        "print(\"Open 'carbon_price_comparison.html' in your browser to interact.\")"
      ],
      "id": "8a930fe5",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/clairebassett/Library/Python/3.9/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}