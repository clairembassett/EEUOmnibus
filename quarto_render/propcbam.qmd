---
format:
  html:
    code-tools: false
execute:
  echo: false
jupyter: python3
---

![](propchangesheader.png){fig-align="center"}

**Carbon Border Adjustment Mechanism(CBAM):** The proposed changes to CBAM largely work to lessen the financial and administrative burden of CBAM certification requirements on importers. The proposal if adopted, would exempt 90% of importers included in CBAM, while covering 99% of total emissions.

![](CBAMgraphic.png){fig-align="center"}

## Comparing EU ETS Allowance Closing Prices Based on Weekly v. Quarterly Averages 
```{python}
import warnings
warnings.filterwarnings("ignore", message="Workbook contains no default style.*")
import pandas as pd
import os
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px


path = "../data"

dataframes = []

# Combining the dataframes into one
for file in os.listdir(path):
    if file.endswith(".xlsx"):
        filepath = os.path.join(path, file)
        df = pd.read_excel(filepath)
        dataframes.append(df)

df = pd.concat(dataframes, ignore_index=True)

df.to_excel("df.xlsx", index=False)

# Renaming the columns for clarity
df = df.rename(columns={"Unnamed: 6": "Auction Price €/tCO2"})
df = df.rename(columns={"Unnamed: 1": "Date"})

# Only including two relevant columns
df1 = df[['Date', 'Auction Price €/tCO2']]

# Drop null values
df1 = df1.dropna()

# Dropping the header rows
df1 = df1.iloc[2:]

# Making a copy to create the quarterly averages
df2 = df1.copy()

# Converting date to datetime type for data manipulation
df1['Date'] = pd.to_datetime(df1['Date'], errors='coerce')
df1 = df1.dropna(subset=['Date'])

# Extracting year and week for data manipulation
df1.loc[:, 'year'] = df1['Date'].dt.isocalendar().year
df1.loc[:, 'week'] = df1['Date'].dt.isocalendar().week

# Calculating weekly average of Auction Prices and adding it as a new column
weeklyaverage = df1.groupby(['year', 'week'])['Auction Price €/tCO2'].mean().reset_index()

# Merging Weekly Averages in to original dataframe
df1 = pd.merge(df1, weeklyaverage, on=['year', 'week'], how='left', suffixes=('', '_weekly_avg'))

# Renaming Weekly Average columns
df1.rename(columns={'Auction Price €/tCO2_weekly_avg': 'Weekly Avg Auction Price €/tCO2'}, inplace=True)

# Sorting by year and week to keep chronological order
df1.sort_values(by=['year', 'week'], inplace=True)

df1['yearweek'] = df1['year'].astype(str) + '-W' + df1['week'].astype(str).str.zfill(2)
df1['yearweek_dt'] = pd.to_datetime(df1['year'].astype(str) + df1['week'].astype(str).str.zfill(2) + '1', format='%G%V%u')


df2['Date'] = pd.to_datetime(df2['Date'], errors='coerce')
df2.dropna(subset=['Date'], inplace=True)

# Extracting year and week for data manipulation
df2.loc[:, 'year'] = df2['Date'].dt.isocalendar().year
df2.loc[:, 'quarter'] = df2['Date'].dt.quarter


quarteraverage = df2.groupby(['year', 'quarter'])['Auction Price €/tCO2'].mean().reset_index()

df2 = pd.merge(df2, quarteraverage, on=['year', 'quarter'], how='left', suffixes=('', 'quarteravg'))

# Renaming Weekly Average columns
df2.rename(columns={'Auction Price €/tCO2_x_quarteravg': 'Quarterly Avg Auction Price €/tCO2'}, inplace=True)


# Sorting by year and week to keep chronological order
df2.sort_values(by=['year', 'quarter'], inplace=True)

df2['yearquarter'] = df2['year'].astype(str) + '-Q' + df2['quarter'].astype(str).str.zfill(2)
quarter_start_month = {1: 1, 2: 4, 3: 7, 4: 10}
df2['quarter_start_month'] = df2['quarter'].map(quarter_start_month)
df2['yearquarter_dt'] = pd.to_datetime(df2['year'].astype(str) + '-' + df2['quarter_start_month'].astype(str) + '-01')

df2.head(1000)


df1['yearweek_date'] = pd.to_datetime(df1['year'].astype(str) + df1['week'].astype(str) + '1', format='%G%V%u')
df2['quarter_start'] = pd.to_datetime(df2['year'].astype(str) + '-' + (3 * df2['quarter'] - 2).astype(str).str.zfill(2) + '-01')

import pandas as pd
import plotly.graph_objects as go

# Date conversion
df1['yearweek_date'] = pd.to_datetime(df1['year'].astype(str) + df1['week'].astype(str) + '1', format='%G%V%u')
df2['quarter_start'] = pd.to_datetime(df2['year'].astype(str) + '-' + (3 * df2['quarter'] - 2).astype(str).str.zfill(2) + '-01')

# Create interactive figure
import plotly.graph_objects as go

# Your df1 and df2 should be defined above this point

fig = go.Figure()

fig.add_trace(go.Scatter(
    x=df1['yearweek_date'],
    y=df1['Weekly Avg Auction Price €/tCO2'],
    mode='lines+markers',
    name='Weekly Average',
    line=dict(color='lightblue'),
    hovertemplate='Week: %{x|%Y-%m-%d}<br>Price: €%{y:.2f}<extra></extra>'
))

fig.add_trace(go.Scatter(
    x=df2['quarter_start'],
    y=df2['Auction Price €/tCO2quarteravg'],
    mode='lines+markers',
    name='Quarterly Average',
    line=dict(shape='hv', color='darkblue'),
    hovertemplate='Quarter Start: %{x|%Y-%m-%d}<br>Price: €%{y:.2f}<extra></extra>'
))

fig.update_layout(
    title='Weekly vs. Quarterly Auction Price Averages',
    title_font=dict(color='darkblue'),
    yaxis_title='Auction Price €/tCO2',
    xaxis=dict(
        tickfont=dict(color='darkblue'),
        title_font=dict(color='darkblue'),
        tickformat='%Y-%m'
    ),
    hovermode='x unified',
    yaxis=dict(
        tickfont=dict(color='darkblue'),
        title_font=dict(color='darkblue')
    ),
    legend=dict(x=0.01, y=0.99),
    template='plotly_white'
)

fig.show()
```



### Comparing Historic Carbon Credit Certificate Prices based on Quarterly and Weekly Average Price Calculations
```{=html}
<div>
  <label>Weight of Emissions(tonnes): <input type="number" id="weight" value="50"></label><br>
  <label>Emission Factor (tCO₂e/tonne): <input type="number" id="ef" value="2.3" step="0.1"></label><br>
  <label>Weekly Average of EU ETS Allowance Closing Prices (€/tCO₂e): <input type="number" id="WeeklyPrice" value="90"></label><br>
  <label>Quarterly Average of EU ETS Allowance Closing Prices (€/tCO₂e): <input type="number" id="QuarterlyPrice" value="90"></label><br>
  <button onclick="calculateCBAM()">Calculate</button>
  <p id="result_weekly"></p>
  <p id="result_quarterly"></p>
</div>

<script>
  function calculateCBAM() {
    const weight = parseFloat(document.getElementById('weight').value);
    const ef = parseFloat(document.getElementById('ef').value);
    const weeklyPrice = parseFloat(document.getElementById('WeeklyPrice').value);
    const quarterlyPrice = parseFloat(document.getElementById('QuarterlyPrice').value);

    const intWeekly = weight * ef;
    const totalWeekly = intWeekly * weeklyPrice;
    const intQuarterly = weight * ef;
    const totalQuarterly = intQuarterly * quarterlyPrice;

    document.getElementById('result_weekly').innerText =
      `Carbon Certificate Price based on **Weekly** EU ETS Allowance Closing Price Averages: €${totalWeekly.toFixed(2)}';

    document.getElementById('result_quarterly').innerText =
      `Carbon Certificate Price based on Quarterly EU ETS Allowance Closing Price Averages: €${totalQuarterly.toFixed(2)}`;
      }
</script>
